<?php

namespace Belca\FileHandler;

use Belca\FileHandler\Contracts\FileHandlerAdapter;

trait FileHandlerTrait
{
    // TODO реализовать все абстрактные методы FileHandler
    /**
     * Устанавливает параметры обработки файла.
     *
     * @param mixed $params Параметры обработки файла
     */
    public function setHandlerConfig($params)
    {
        // TODO этот метод нужно реализовать самому.
        // Его можно расширить. Было бы удобнее задавать настройки через СУС,
        // но пока можно тут.
        // TODO Шаблоны генерации имен и их опции - или передавать как имя файла
        // Передается в параметрах обработки сохраненного файла setHandlerParameters
        // // Задание имен сохранения файла через setHandlerParameters

    }

    /**
     * Запускает обработку файла по заданным параметрам.
     *
     * @return bool
     */
    public function handle($params = null)
    {
        // Если приняты параметры, то соединяем их с текущими настройками
        // Правила слияния конфигурации и какие данные могут передать/изменить?

        $results = [];

        // 1. Обработка одного файла без перегенерации, только получение значений
        // 2. Обработка файла с генерацей новых файлов и получением значений
        // 3. Обработка файлов без перегенерации, но получить все значения
        // 4. Переобработка файлов с измененными конфигами

        // За одну обработку файла были сгенерированы файлы от 2-х обработчиков
        // и получены сведения от 3-х обработчиков.
        // Как вариант запускать все обработчики по порядку, а не все сразу

        if (! empty($this->usedHandlers) && is_array($this->usedHandlers)) {
            foreach ($this->usedHandlers as $key => $className) {
                if ($this->usedHandlers[$key] instanceof FileHandlerAdapter) {
                    $adapters[$key] = new $className($file, $config[$key], $this->script);
                    $results[$key] = $adapters[$key]->getInfo();
                }
            }
        }




        // TODO в зависимости от указанного скрипта выполняются те или иные действия
        // для разных адаптеров обработчиков

        // Обработка файла может выполняться, а может и не выполняться, т.к.
        // может быть загружена модификация файла, которую не трубется модифицировать

        // ИЛИ
        // инициализируется необходимый (необходимые) обработчики и передаются в них
        // данные

        // TODO этот метод нужно реализовать самому.
        // Его можно расширить. Было бы удобнее задавать настройки через СУС,
        // но пока можно тут.
        // TODO Шаблоны генерации имен и их опции - или передавать как имя файла
        // Передается в параметрах обработки сохраненного файла setHandlerParameters
        // // Задание имен сохранения файла через setHandlerParameters

    }

    /**
     * Сохраняет файл со стандартным или указанным именем файла. При успешном
     * сохранении возвращает путь к новому файлу.
     *
     * @param string $filename Новое имя файла
     * @param bool   $replace  Заменяет существующий файл
     * @return string
     */
    public function save($filename = null, $replace = true)
    {
        if ($filename) {
            // имя файла
        } elseif (isset($this->filename)) {
            $filename = $this->filename;
        }

        // TODO проверяем существование файла по указанному пути.

        // Сохраняем по указанному пути

        // Задание имени сохранения файла - генерируется отдельно
        // TODO сохраняет файл в указаное место
    }

    public function getFilePath()
    {
      return '';
    }

    /**
     * Возвращает пути к файлам.
     *
     * @return array
     */
    public function getFilePaths()
    {

    }

    /**
     * Возвращает информацию о файле.
     *
     * @return mixed
     */
    public function getFileInfo()
    {

    }

    /**
     * Возвращает всю информацию о всех файлах.
     *
     * @return mixed
     */
    public function getAllInfo()
    {

    }

    /**
     * Возвращает основную информацию о файле в соответствии с основными полями.
     *
     * @return mixed
     */
    public function getBasicFileProperties()
    {

    }

    /**
     * Возвращает дополнительную информацию о файле в соответствии с основными
     * полями (возвращает все свойства, кроме заданных).
     *
     * @return mixed
     */
    public function getAdditionalFileProperties()
    {

    }

    /**
     * Возвращает базовые свойства всех файлов.
     *
     * @return mixed
     */
    public function getBasicProperties()
    {

    }

    /**
     * Возвращает дополнительные свойства всех файлов в соответствии с основными
     * полями (возвращает все свойства, кроме заданных).
     *
     * @return mixed
     */
    public function getAdditionalProperties()
    {

    }
}
